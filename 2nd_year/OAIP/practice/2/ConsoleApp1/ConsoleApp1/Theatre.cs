using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApp1
{
    public class Theatre
    {
        // Начальное количество элементов в массиве. Эта переменная отслеживает, сколько объектов Play
        // было добавлено в массив. Начальное значение 0 указывает на то, что в массиве еще нет элементов.
        private int count = 0;

        // Начальный размер массива, который определяет количество элементов, которые могут быть
        // хранены в массиве без необходимости его расширения. Значение 2 указывает, что массив 
        // изначально может хранить два объекта Play.
        private int length = 2;

        // Массив plays, предназначенный для хранения объектов Play.
        // Поскольку массив создается для хранения двух элементов,
        // это обеспечивает начальное место для двух постановок, прежде чем потребуется расширение массива.
        private Play[] plays = new Play[2];

        public void AddPlay(Play play)
        {
            // Проверка, равно ли текущее количество элементов (count) максимальной длине массива (length)
            if (count == length)
            {
                Resize();
            }
            // Добавляем новый объект play в массив plays на позицию, указанную count,
            // после чего увеличиваем count на единицу (count++).
            plays[count++] = play;
        }

        private void Resize()
        {
            // Создаем новый массив newPlays с удвоенным размером по сравнению с текущим массивом plays
            Play[] newPlays = new Play[length * 2];

            // Копируем все существующие элементы из старого массива plays в новый массив newPlays
            for (int i = 0; i < count; i++)
            {
                newPlays[i] = plays[i];
            }

            // Обновляем ссылку plays, чтобы она теперь указывала на новый увеличенный массив newPlays
            plays = newPlays;

            // Удваиваем значение переменной length, которая теперь отражает новую длину массива plays
            length *= 2; // Обновляем значение length после расширения массива
        }


        public void DeleteLastPlay()
        {
            // Проверяем, есть ли элементы в массиве для удаления
            if (count > 0)
            {
                // Уменьшаем переменную count на единицу, чтобы указать на последний текущий элемент,
                // и устанавливаем этот элемент в null, тем самым "удаляя" его из массива
                plays[--count] = null;
            }
            else
            {
                Console.WriteLine("Удалять нечего.");
            }
        }


        public void DisplayAll()
        {
            for (int i = 0; i < count; i++)
            {
                // Используем оператор условного null для предотвращения попытки вызова метода Display
                // на элементе, который может быть null. Если plays[i] не null, вызываем метод Display().
                plays[i]?.Display();
            }
        }

        public void ShowCount()
        {
            Console.WriteLine($"Всего постановок: {count}");
        }

        public void Clear()
        {
            // Создаем новый массив объектов Play с начальным размером 2 элемента.
            // Это полностью заменяет старый массив, тем самым удаляя все предыдущие элементы.
            plays = new Play[2];

            // Сбрасываем  length до  2.
            length = 2;

            // Сбрасываем счетчик count до 0.
            count = 0;
        }

    }
}
