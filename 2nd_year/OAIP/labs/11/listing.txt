# Form 1

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace WindowsFormsApp1
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
        }

        private void button2_Click(object sender, EventArgs e)
        {
            Form registerForm = new RegisterForm();
            registerForm.ShowDialog();
        }

        private void button1_Click(object sender, EventArgs e)
        {
            Form signInForm = new SignInForm2();
            signInForm.ShowDialog();
        }
    }
}




# Mail

using System;
using System.Net.Mail;
using System.Net;
using System.Windows.Forms;

namespace WindowsFormsApp1
{
    internal class Mail
    {
        public static string GenerateCode()
        {
            Random random = new Random();
            int randomNumber = random.Next(1000, 10000);
            return randomNumber.ToString();
        }

        public void SendCode(string name, string email, string code)
        {
            string fromEmail = "Sayfutdinovaam@gmail.com";
            string fromPassword = "xrqwmypnjpjrtdym";
            MessageBox.Show(code);

            try
            {
                SmtpClient client = new SmtpClient("smtp.gmail.com", 587)
                {
                    Credentials = new NetworkCredential(fromEmail, fromPassword),
                    EnableSsl = true,
                    DeliveryMethod = SmtpDeliveryMethod.Network
            };

                MailMessage mailMessage = new MailMessage
                {
                    From = new MailAddress(fromEmail),
                    Subject = "Ваш код подтверждения",
                    Body = this.htmlBody(name, code),
                    IsBodyHtml = true
                };
                mailMessage.To.Add(email);

                client.Send(mailMessage);
            }
            catch (Exception ex)
            {
                MessageBox.Show("Ошибка отправки почты: " + ex.Message);
            }
        }

        private string htmlBody(string name, string code)
        {
            string html = $"<body class=\"bg-red-100\">\r\n  " +
                $"<div class=\"container\">\r\n    " +
                $"<div class=\"space-y-4 mb-6\">\r\n      " +
                $"<h1 class=\"text-4xl fw-800\">{name}, ваш код для сброса пароля</h1>\r\n      " +
                $"<a class=\"btn btn-red-500 rounded-full px-6 w-full w-lg-48\" disable><b>{code}</b></a>\r\n    " +
                $"</div>\r\n  </div>\r\n</body>";
            return html;
        }
    }

}



# Manager

using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;

namespace WindowsFormsApp1
{
    public class Manager
    {
        public string hashedString(string s)
        {
            byte[] bytes = Encoding.UTF8.GetBytes(s);
            MD5CryptoServiceProvider CSP = new MD5CryptoServiceProvider();

            byte[] byteHash = CSP.ComputeHash(bytes);
            string hash = "";

            foreach (byte b in byteHash)
            {
                hash += string.Format("{0:x2}", b);
            }

            return hash;
        }
    }
}



# RefreshPassword

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Entity.Migrations;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace WindowsFormsApp1
{
    public partial class RefreshPassword : Form
    {
        public RefreshPassword()
        {
            InitializeComponent();
        }

        string refreshCode = Mail.GenerateCode();
        User user;

        private void textBox1_TextChanged(object sender, EventArgs e)
        {
            if (textBox1.Text != "")
            {
                button1.Enabled = true;
            } else
            {
                button1.Enabled = false;
            }
        }

        private void button1_Click(object sender, EventArgs e)
        {
            string login = textBox1.Text;
            User _user = User.manager.get(
                new Dictionary<string, object>
                {
                    {"login", login},
                }
            );

            if (_user != null)
            {
                user = _user;
                MessageBox.Show($"На почту {user.Email} будет отправлено сообщение с кодом");
                new Mail().SendCode(user.Name, user.Email, refreshCode);
            } else
            {
                MessageBox.Show("Пользователь не найден");
                return;
            }

            groupBox2.Enabled = true;
            button2.Enabled = false;
            groupBox1.Enabled = false;
        }

        private void textBox2_TextChanged(object sender, EventArgs e)
        {
            if (textBox2.Text != "")
            {
                button2.Enabled = true;
            }
            else
            {
                button2.Enabled = false;
            }
        }

        private void button2_Click(object sender, EventArgs e)
        {
            if (refreshCode == textBox2.Text)
            {
                groupBox3.Enabled = true;
                button3.Enabled = false;
                groupBox2.Enabled = false;
            } else
            {
                MessageBox.Show("Неверный код");
            }
        }

        private void textBox3_TextChanged(object sender, EventArgs e)
        {
            if (textBox3.Text != "")
            {
                button3.Enabled = true;
            }
            else
            {
                button3.Enabled = false;
            }
        }

        private void button3_Click(object sender, EventArgs e)
        {
            Validator validator = new Validator();

            string password = textBox3.Text;
            bool validateResult = validator.validateRefreshPassword(password);

            if (validateResult)
            {
                user.Password = User.manager.hashedString(password);

                using (var context = new UserContext())
                {
                    context.Users.AddOrUpdate(user);
                    context.SaveChanges();
                    MessageBox.Show("Пароль успешно изменен.");
                    this.Close();
                }
            }
        }
    }
}



# RegisterForm

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace WindowsFormsApp1
{
    public partial class RegisterForm : Form
    {
        public RegisterForm()
        {
            InitializeComponent();
        }

        private void button2_Click(object sender, EventArgs e)
        {
            Validator validator = new Validator();
            string name = this.textBox1.Text;
            string surname = this.textBox2.Text;
            string dateOfBirth = this.textBox3.Text;
            string email = this.textBox4.Text;
            string phoneNumber = this.textBox5.Text;
            string rangeOfScience = this.textBox6.Text;
            string dateOfFirstPost = this.textBox7.Text;
            string login = this.textBox8.Text;
            string password = this.textBox9.Text;

            bool validateResult = validator.validateRegisterData(
                name,
                surname,
                dateOfBirth,
                email,
                phoneNumber,
                rangeOfScience,
                dateOfFirstPost,
                login,
                password
            );

            if (validateResult)
            {
                User.manager.create(
                    name,
                    surname,
                    dateOfBirth,
                    email,
                    phoneNumber,
                    rangeOfScience,
                    dateOfFirstPost,
                    login,
                    password
                );

                MessageBox.Show("Вы успешно зарегистрировались");
                this.Close();
            }
        }

        private void textBox3_TextChanged(object sender, EventArgs e)
        {

        }

        private void textBox6_TextChanged(object sender, EventArgs e)
        {

        }
    }
}



# SignInForm2

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace WindowsFormsApp1
{
    public partial class SignInForm2 : Form
    {
        public SignInForm2()
        {
            InitializeComponent();
        }

        private void button1_Click(object sender, EventArgs e)
        {
            Validator validator = new Validator();
            string login = textBox8.Text;
            string password = textBox9.Text;

            bool validateResult = validator.validateSignIn(login, password);

            if (validateResult)
            {
                User user = User.manager.get(
                    new Dictionary<string, object>
                    {
                        {"login", login},
                        {"password", User.manager.hashedString(password)}
                    }
                );

                if (user != null)
                {
                    MessageBox.Show(
                        "Вы успешно вошли!\n\n" +
                        $"Имя: {user.Name}\n" +
                        $"Фамилия: {user.Surname}\n" +
                        $"Дата рождения: {user.DateOfBirth}\n" +
                        $"E-mail: {user.Email}\n" +
                        $"Номер телефона: {user.PhoneNumber}\n" +
                        $"Область исследования: {user.RangeOfScience}\n" +
                        $"Дата первой публикации: {user.DateOfFirstPost}\n"
                    );
                } else
                {
                    MessageBox.Show("Пользователь с такими данными не найден :(");
                }
            }
        }

        private void button2_Click(object sender, EventArgs e)
        {
            Form refreshPasswordForm = new RefreshPassword();
            refreshPasswordForm.ShowDialog();
        }
    }
}




# User

using System;
using System.ComponentModel.DataAnnotations;

namespace WindowsFormsApp1
{
    public class User
    {
        public int Id { get; set; } // Primary key

        [Required]
        [StringLength(50)]
        public string Name { get; set; }

        [Required]
        [StringLength(50)]
        public string Surname { get; set; }

        [Required]
        public DateTime DateOfBirth { get; set; }

        [Required]
        [StringLength(100)]
        [EmailAddress]
        public string Email { get; set; }

        [Required]
        [StringLength(15)]
        public string PhoneNumber { get; set; }

        [Required]
        [StringLength(100)]
        public string RangeOfScience { get; set; }

        [Required]
        public DateTime DateOfFirstPost { get; set; }

        [Required]
        [StringLength(50)]
        public string Login { get; set; }

        [Required]
        [StringLength(100)]
        public string Password { get; set; }

        public static UserManager manager = new UserManager();
    }

}


# UserContext

using System.Data.Entity;

namespace WindowsFormsApp1
{
    public class UserContext : DbContext
    {
        public UserContext() : base("DbConnection") { }
        public DbSet<User> Users { get; set; }
    }

}



# UserManager

using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Text;
using System.Threading.Tasks;

namespace WindowsFormsApp1
{
    public class UserManager : Manager
    {
        public void create(
            string name,
            string surname,
            string dateOfBirth,
            string email,
            string phoneNumber,
            string rangeOfScience,
            string dateOfFirstPost,
            string login,
            string password
        )
        {
            using (var context = new UserContext())
            {
                var user = new User {
                    Name = name,
                    Surname = surname,
                    DateOfBirth = DateTime.Parse(dateOfBirth),
                    Email = email,
                    PhoneNumber = phoneNumber,
                    RangeOfScience = rangeOfScience,
                    DateOfFirstPost = DateTime.Parse(dateOfFirstPost),
                    Login = login,
                    Password = this.hashedString(password)
                };
                context.Users.Add(user);
                context.SaveChanges();
            }
        }

        public User get(Dictionary<string, object> criteria)
        {
            using (var context = new UserContext())
            {
                // Начинаем с всех пользователей
                IQueryable<User> query = context.Users;

                // Динамически строим запрос на основе критериев
                foreach (var criterion in criteria)
                {
                    var parameter = Expression.Parameter(typeof(User), "user");
                    var property = Expression.Property(parameter, criterion.Key);
                    var constant = Expression.Constant(criterion.Value);
                    var equals = Expression.Equal(property, constant);
                    var lambda = Expression.Lambda<Func<User, bool>>(equals, parameter);

                    query = query.Where(lambda);
                }

                // Выполняем запрос и возвращаем результат
                return query.FirstOrDefault(); // Возвращает первый найденный объект или null, если ничего не найдено
            }
        }
    }
}




# Validator

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Text.RegularExpressions;
using System.Windows.Forms;

namespace WindowsFormsApp1
{
    internal class Validator
    {
        public bool ValidateName(string name)
        {
            // Разрешаем буквы, дефисы и пробелы
            return Regex.IsMatch(name, @"^[a-zA-Zа-яА-ЯёЁ\- ]+$");
        }

        public bool ValidateSurname(string surname)
        {
            // Аналогично имени
            return Regex.IsMatch(surname, @"^[a-zA-Zа-яА-ЯёЁ\- ]+$");
        }

        public bool ValidateDateOfBirth(string date)
        {
            // ДД.ММ.ГГГГ формат
            return Regex.IsMatch(date, @"^\d{2}\.\d{2}\.\d{4}$");
        }

        public bool ValidateEmail(string email)
        {
            // Простая проверка электронной почты
            return Regex.IsMatch(email, @"^[^@\s]+@[^@\s]+\.[^@\s]+$");
        }

        public bool ValidatePhoneNumber(string phoneNumber)
        {
            // Телефон начинается с +7 и содержит 10 цифр после (не считая возможные пробелы и дефисы)
            return Regex.IsMatch(phoneNumber, @"^\+7[\s-]?(\d{3}[\s-]?){2}\d{4}$");
        }

        public bool ValidateRangeOfScience(string range)
        {
            // Проверка на отсутствие спецсимволов
            return Regex.IsMatch(range, @"^[a-zA-Zа-яА-ЯёЁ0-9\- ]+$");
        }

        public bool ValidateDateOfFirstPost(string date)
        {
            // Аналогично дате рождения
            return Regex.IsMatch(date, @"^\d{2}\.\d{2}\.\d{4}$");
        }

        public bool ValidateLogin(string login)
        {
            // Проверка на отсутствие спецсимволов
            return Regex.IsMatch(login, @"^[a-zA-Zа-яА-ЯёЁ0-9\- ]+$");
        }

        public bool validateRegisterData(
            string name,
            string surname,
            string dateOfBirth,
            string email,
            string phoneNumber,
            string rangeOfScience,
            string dateOfFirstPost,
            string login,
            string password
        )
        {
            // Валидация имени
            if (name == "")
            {
                MessageBox.Show("Имя не может быть пустым");
                return false;
            }
            else if (!this.ValidateName(name))
            {
                MessageBox.Show("Имя может содержать только буквы");
                return false;
            }

            // Валидация фамилии
            if (surname == "")
            {
                MessageBox.Show("Фамилия не может быть пустой");
                return false;
            }
            else if (!this.ValidateSurname(surname))
            {
                MessageBox.Show("Фамилия может содержать только буквы");
                return false;
            }

            // Валидация даты рождения
            if (dateOfBirth == "")
            {
                MessageBox.Show("Дата рождения не может быть пустой");
                return false;
            }
            else if (!this.ValidateDateOfBirth(dateOfBirth))
            {
                MessageBox.Show("Дата рождения должна соответствовать формату DD.MM.YYYY");
                return false;
            }

            // Валидация почты
            if (email == "")
            {
                MessageBox.Show("Почта не может быть пустой");
                return false;
            }
            else if (!this.ValidateEmail(email))
            {
                MessageBox.Show("Почта должна соответствовать формату 'email@mail.some'");
                return false;
            }

            // Валидация номера телефона
            if (phoneNumber == "")
            {
                MessageBox.Show("Номер телефона не может быть пустым");
                return false;
            }
            else if (!this.ValidatePhoneNumber(phoneNumber))
            {
                MessageBox.Show("Номер должен начинаться с +7 и содержать 10 цифр после");
                return false;
            }

            // Валидация области исследования
            if (rangeOfScience == "")
            {
                MessageBox.Show("Область исследования не может быть пустой");
                return false;
            }
            else if (!this.ValidateRangeOfScience(rangeOfScience))
            {
                MessageBox.Show("Область исследования может содержать только буквы и цифры");
                return false;
            }

            // Валидация даты первой публикации
            if (dateOfFirstPost == "")
            {
                MessageBox.Show("Дата первой публикации не может быть пустой");
                return false;
            }
            else if (!this.ValidateDateOfFirstPost(dateOfFirstPost))
            {
                MessageBox.Show("Дата первой публикации должна соответствовать формату DD.MM.YYYY");
                return false;
            }

            // Валидация логина
            if (login == "")
            {
                MessageBox.Show("Логин не может быть пустым");
                return false;
            }
            else if (!this.ValidateLogin(login))
            {
                MessageBox.Show("Логин может содержать только буквы и цифры");
                return false;
            } else
            {
                User user = User.manager.get(
                    new Dictionary<string, object>
                    {
                        {"login", login}
                    }
                );

                if (user != null)
                {
                    MessageBox.Show("Пользователь с таким логином уже существует");
                    return false;
                }
            }

            // Валидация пароля
            if (password == "")
            {
                MessageBox.Show("Пароль не может быть пустым");
                return false;
            }

            return true;
        }

        public bool validateSignIn(string login, string password)
        {
            // Валидация логина
            if (login == "")
            {
                MessageBox.Show("Логин не может быть пустым");
                return false;
            }
            // Валидация пароля
            if (password == "")
            {
                MessageBox.Show("Пароль не может быть пустым");
                return false;
            }

            return true;
        }

        public bool validateRefreshPassword(string password)
        {
            // Валидация пароля
            if (password == "")
            {
                MessageBox.Show("Пароль не может быть пустым");
                return false;
            }
            return true;
        }
    }

}

