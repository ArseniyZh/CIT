# form1

using System;
using System.Collections.Generic;
using System.Drawing;
using System.Runtime.Remoting.Metadata.W3cXsd2001;
using System.Windows.Forms;

namespace WindowsFormsApp1
{
    public partial class Form1 : Form
    {
        Bitmap bitmap;

        public Form1()
        {
            InitializeComponent();
            bitmap = new Bitmap(pictureBox1.ClientSize.Width, pictureBox1.ClientSize.Height);
            Init.pen = new Pen(Color.Purple, 5);
            Init.bitmap = bitmap;
            Init.pictureBox = pictureBox1;
            ShapeContainer.figureList = new List<Figure>(1);

            label15.Text = $"w: {pictureBox1.ClientSize.Width} h: {pictureBox1.ClientSize.Height}";
        }

        int startX, startY;

        private bool checkStartCoordinates()
        {
            bool _error = false;
            string _errorText = "";

            if (! int.TryParse(textBox3.Text, out int x) && (x < 0 || x > pictureBox1.ClientSize.Width))
            {
                _error = true;
                _errorText = $"Введите корректное значение начальной координаты X: {textBox3.Text}";
            }
            if (! int.TryParse(textBox4.Text, out int y) && !_error && (y < 0 || y > pictureBox1.ClientSize.Height))
            {
                _error = true;
                _errorText = $"Введите корректное значение начальной координаты Y: {textBox4.Text}";
            }

            startX = x;
            startY = y;

            if (_error)
            {
                MessageBox.Show(_errorText);
                return false;
            }

            return true;
        }

        private void raiseIncorrectStartX()
        {
            MessageBox.Show("Введите корректное значение X");
            textBox3.Focus();
            return;
        }

        private void raiseIncorrectStartY()
        {
            MessageBox.Show("Введите корректное значение Y");
            textBox4.Focus();
            return;
        }

        private void addFigureToList(Figure figure, string figureName)
        {
            ShapeContainer.figureList.Add(figure);
            int count = ShapeContainer.figureList.Count;
            comboBox1.Items.Add($"({count}) {figureName}"); ; ;
        }

        private void button1_Click(object sender, EventArgs e)
        {
            // Прямоугольник

            bool checkError = checkStartCoordinates();
            if (!checkError) { return; }

            int.TryParse(textBox1.Text, out int a);
            int.TryParse(textBox2.Text, out int b);

            if (a <= 0 || b <= 0)
            {
                MessageBox.Show("Введите значения больше 0");
            }

            if (startX + a >= pictureBox1.ClientSize.Width)
            {
                raiseIncorrectStartX();
                return;
            }
            if (startY + b >= pictureBox1.ClientSize.Width)
            {
                raiseIncorrectStartY();
                return;
            }

            Rectangle rectangle = new Rectangle(startX, startY, a, b);
            addFigureToList(rectangle, $"Прямоугольник ({a}; {b})");
            rectangle.Draw();
        }

        private void button2_Click(object sender, EventArgs e)
        {
            // Квадрта
            bool checkError = checkStartCoordinates();
            if (!checkError) { return; }

            int.TryParse(textBox6.Text, out int a);

            if (a <= 0)
            {
                MessageBox.Show("Введите значение больше 0");
            }


            if (a <= 0)
            {
                MessageBox.Show($"Введите корректные значение длины");
                return;
            } if (startX + a >= pictureBox1.ClientSize.Width)
            {
                raiseIncorrectStartX();
                return;
            }
            if (startY + a >= pictureBox1.ClientSize.Height)
            {
                raiseIncorrectStartY();
                return;
            }

            Square square = new Square(startX, startY, a);
            addFigureToList(square, $"Квадрат ({a})");
            square.Draw();
        }
        private void button4_Click(object sender, EventArgs e)
        {
            // Треугольник

            bool checkError = checkStartCoordinates();
            if (!checkError) { return; }

            int.TryParse(textBox8.Text, out int a);

            if (a <= 0)
            {
                MessageBox.Show("Введите значение больше 0");
                return;
            }

            if (a > pictureBox1.ClientSize.Width || a > pictureBox1.ClientSize.Height)
            {
                MessageBox.Show("Введите значение больше 0");
                textBox4.Text = "";
                textBox4.Focus();
                return;
            }
            if (startX + a >= pictureBox1.ClientSize.Width)
            {
                raiseIncorrectStartX();
                return;
            }
            if (startY + a >= pictureBox1.ClientSize.Height)
            {
                raiseIncorrectStartY();
                return;
            }

            Triangle triangle = new Triangle(startX, startY, a);
            addFigureToList(triangle, $"Треугольник ({a})");
            triangle.Draw();
        }

        private void button5_Click(object sender, EventArgs e)
        {
            // Элипс

            bool checkError = checkStartCoordinates();
            if (!checkError) { return; }

            int.TryParse(textBox10.Text, out int a);
            int.TryParse(textBox9.Text, out int b);

            if (a <= 0 || b <= 0)
            {
                MessageBox.Show("Введите значения больше 0");
                return;
            }

            if (startX + a >= pictureBox1.ClientSize.Width)
            {
                raiseIncorrectStartX();
                return;
            }
            if (startY + b >= pictureBox1.ClientSize.Height)
            {
                raiseIncorrectStartY();
                return;
            }

            Ellipse ellipse = new Ellipse(startX, startY, a, b);
            addFigureToList(ellipse, $"Элипс ({a}; {b})");
            ellipse.Draw();
        }

        private void button6_Click(object sender, EventArgs e)
        {
            // Круг

            bool checkError = checkStartCoordinates();
            if (!checkError) { return; }

            int.TryParse(textBox11.Text, out int a);

            if (a <= 0)
            {
                MessageBox.Show("Введите значение больше 0");
                return;
            }

            if (startX + a >= pictureBox1.ClientSize.Width)
            {
                raiseIncorrectStartX();
                return;
            }
            if (startY + a >= pictureBox1.ClientSize.Height)
            {
                raiseIncorrectStartY();
                return;
            }

            Circle circle = new Circle(startX, startY, a);
            addFigureToList(circle, $"Круг ({a})");
            circle.Draw();
        }

        private void button9_Click(object sender, EventArgs e)
        {
            // Дом

            bool checkError = checkStartCoordinates();
            if (!checkError) { return; }

            int.TryParse(textBox15.Text, out int a);
            int.TryParse(textBox14.Text, out int b);

            if (a <= 0 || b <= 0)
            {
                MessageBox.Show("Введите значения больше 0");
                return;
            }

            if (startX + a * 2 > pictureBox1.ClientSize.Width || startY + a * 2 > pictureBox1.ClientSize.Height)
            {
                raiseIncorrectStartX();
                return;
            }
            if (startX + b * 2 > pictureBox1.ClientSize.Width || startY + b * 2 > pictureBox1.ClientSize.Height)
            {
                raiseIncorrectStartX();
                return;
            }

            House house = new House(startX, startY, a, b);
            addFigureToList(house, $"Дом ({a}; {b})");
            house.Draw();
        }

        private void button7_Click(object sender, EventArgs e)
        {
            if (comboBox1.SelectedIndex >= 0)
            {
                Figure.DeleteF(ShapeContainer.figureList[comboBox1.SelectedIndex]);
                comboBox1.Items.RemoveAt(comboBox1.SelectedIndex);
                comboBox1.SelectedIndex = -1;
            }
        }

        private void button8_Click(object sender, EventArgs e)
        {
            if (comboBox1.SelectedIndex >= 0)
            {
                int.TryParse(textBox12.Text, out int newX);
                int.TryParse(textBox13.Text, out int newY);
                
                ShapeContainer.figureList[comboBox1.SelectedIndex].MoveTo(newX, newY, comboBox1.SelectedIndex);
                return;
            }
        }

        private void button10_Click(object sender, EventArgs e)
        {
            // Многоугольник

            using (Form2 formPoints = new Form2())
            {
                if (formPoints.ShowDialog() == DialogResult.OK)
                {
                    List<Point> points = formPoints.Points;
                    if (points.Count < 3)
                    {
                        MessageBox.Show("Многоугольник должен состоять как минимум из трех точек");
                        return;
                    }

                    _Polygon polygon = new _Polygon(points);
                    addFigureToList(polygon, $"Многоугольник ({points.Count} точек)");
                    polygon.Draw();
                }
            }
        }

        private void textBox3_TextChanged(object sender, EventArgs e)
        {
        }
    }
}



# form 2

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using static System.Windows.Forms.VisualStyles.VisualStyleElement;

namespace WindowsFormsApp1
{
    public partial class Form2 : Form
    {
        public List<Point> Points { get; private set; } = new List<Point>();

        public Form2()
        {
            InitializeComponent();
        }

        private void button1_Click(object sender, EventArgs e)
        {
            this.DialogResult = DialogResult.OK;
        }

        private void textBox1_TextChanged(object sender, EventArgs e)
        {

        }

        private void button2_Click_1(object sender, EventArgs e)
        {
            if (int.TryParse(textBox1.Text, out int x) && int.TryParse(textBox2.Text, out int y))
            {
                Points.Add(new Point(x, y));
                textBox1.Clear();
                textBox2.Clear();
            }
            else
            {
                MessageBox.Show("Введите корректные числа");
            }
        }
    }
}
